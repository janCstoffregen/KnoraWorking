@*
 * Copyright © 2015 Lukas Rosenthaler, Benjamin Geer, Ivan Subotic,
 * Tobias Schweizer, Sepideh Alassi, André Kilchenmann, and Sepideh Alassi.
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi._
@import org.knora.webapi.twirl.SparqlTemplateLinkUpdate
@import org.knora.webapi.messages.v1.responder.valuemessages._

@**
 * Generates statements to be added to the INSERT clause of a SPARQL update when creating a new link between resources.
 * This template is used in two contexts: when creating a single link in an existing resource, and when creating
 * a new resource with its initial values.
 *
 * @param resourceIndex     the index of the resource .
 * @param valueIndex the index of the link value in the sequence of values that are being created in the transaction.
 *                   This index will be used to make SPARQL variable names specific to the value being created. If
 *                   a single link is being created in an existing resource, `valueIndex` will be 0.
 * @param linkUpdate a [[LinkUpdate]] object describing the link to insert.
 * @param maybeComment an optional comment on the link.
 *
 * The expected SPARQL variables are those generated by generateWhereStatementsForCreateLink.scala.txt, plus
 * `?resource` and `?currentTime`.
 *@
@(resourceIndex: Int,
  valueIndex: Int,
  linkUpdate: SparqlTemplateLinkUpdate,
  maybeComment: Option[String])
  @index = {@resourceIndex.toString()_@valueIndex.toString()}
        # Value@index
        # Property: @linkUpdate.linkPropertyIri

        @* Insert a direct link between the source and target resources. *@
        @if(linkUpdate.insertDirectLink) {
            ?resource@resourceIndex ?linkProperty@index ?linkTarget@index .
        } else {
            @{throw SparqlGenerationException(s"LinkUpdate.insertDirectLink must be true in this SPARQL template (for value @index)"); ()}
        }

        @* Insert a LinkValue describing the link. *@
        ?newLinkValue@index rdf:type knora-base:LinkValue ;
            rdf:subject ?resource@resourceIndex ;
            rdf:predicate ?linkProperty@index ;
            rdf:object ?linkTarget@index ;
            knora-base:valueHasString "@linkUpdate.linkTargetIri" ;
            knora-base:valueHasRefCount @linkUpdate.newReferenceCount ;
            @maybeComment match {
                case Some(comment) => {
                    knora-base:valueHasComment """@comment""" ;
                }

                case None => {}
            }
            knora-base:valueHasOrder ?nextOrder@index ;
            knora-base:isDeleted false ;
            knora-base:valueCreationDate ?currentTime .

        ?newLinkValue@index knora-base:attachedToUser <@linkUpdate.newLinkValueCreator> ;
            knora-base:hasPermissions "@linkUpdate.newLinkValuePermissions" .

        @* Attach the new LinkValue to its containing resource. *@
        ?resource@resourceIndex ?linkValueProperty@index ?newLinkValue@index .
